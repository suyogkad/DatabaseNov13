

/* procedure to add the retreats */

CREATE OR REPLACE PROCEDURE proc_add_retreat 
IS
V_RETREATID NUMBER(6);
V_NAME VARCHAR2(30);
V_INVOICE invoice_type;
V_FOLLOWUP followUp_type;

BEGIN
V_RETREATID := 100;
V_NAME := 'TESTING';
V_INVOICE := invoice_type('Simakant',400.00,TO_DATE('2022-12-09','YYYY-MM-DD'),TO_DATE('2022-12-09','YYYY-MM-DD'));
V_FOLLOWUP := followUp_type('6:30','10 minutes',TO_DATE('2022-10-06','YYYY-MM-DD'));

INSERT INTO retreats VALUES(V_RETREATID,V_NAME,V_INVOICE,V_FOLLOWUP);

COMMIT;

DBMS_OUTPUT.PUT_LINE('DATA INSERTED SUCCESSFULLY');
END proc_add_retreat;
/



/* procedure to list down all the retreat name with for loop */

CREATE OR REPLACE PROCEDURE proc_retreat_name
IS r_name retreats.retreat_name%TYPE;
BEGIN
FOR c IN(SELECT retreat_name INTO r_name FROM retreats)
LOOP
r_name:=c.retreat_name;
DBMS_OUTPUT.PUT_LINE(r_name);
END LOOP;
END proc_retreat_name;
/







/* PROCEDURE CREATED WITH CURSOR USED */

CREATE OR REPLACE PROCEDURE check_rating(in_rating NUMBER) IS
    CURSOR cur_reviews IS
    SELECT rating
    FROM reviews;

BEGIN 

    FOR rec_cur_reviews IN cur_reviews LOOP

    IF rec_cur_reviews.rating = in_rating

    THEN 
    DBMS_OUTPUT.PUT_LINE('USER EXISTS');
    END IF;

END LOOP;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END check_rating;
/

















CREATE OR REPLACE PROCEDURE proc_update_retreat 
IS
V_RETREATID NUMBER(6);
V_NAME VARCHAR2(30);
V_INVOICE invoice_type;
V_FOLLOWUP followUp_type;

BEGIN
V_RETREATID := 100;
V_NAME := 'TESTING';
V_INVOICE := invoice_type('Simakant',400.00,TO_DATE('2022-12-09','YYYY-MM-DD'),TO_DATE('2022-12-09','YYYY-MM-DD'));
V_FOLLOWUP := followUp_type('6:30','10 minutes',TO_DATE('2022-10-06','YYYY-MM-DD'));

INSERT INTO retreats VALUES(V_RETREATID,V_NAME,V_INVOICE,V_FOLLOWUP);

COMMIT;

DBMS_OUTPUT.PUT_LINE('DATA INSERTED SUCCESSFULLY');
END proc_add_retreat;
/










BEGIN
proc_add_retreat;
END;
/

BEGIN
func_max_rating();
END;
/


















